continue
 UsermailerMailer.welcome_email(@user).deliver
continue
@user
user
continue
 UsermailerMailer.welcome_email(@user).deliver_later
continue
UsermailerMailer.welcome_email(@user).perform_deliveries
UsermailerMailer.welcome_email(@user).deliver_later
@user.save
continue
 user_path(@user)
 user_path(@user.id)
continue
@user.id
(@user.id).to_i
@user.id
current_user.id
continue
params[:session][:password_digest]
user.password_digest
user
user.password_digest == (params[:session][:password_digest])
user.nil?
continue
user.nil?
 user = User.find_by_email(params[:session][:email])
continue
 user = User.find_by_email(params[:session][:email])
continue
create.nil?
 user != "" | nil?
 user = User.find_by_email(params[:session][:email])
continue
abc = user.password_digest == (params[:session][:password_digest])
user = User.find_by_email(params[:session][:email])
continue
user = User.find_by_email(params[:session][:email])
continue
user = User.find_by_email(params[:session][:email])
continue
user = User.find_by_email(params[:session][:email])
continue
 user = User.find_by_email(params[:session][:email])
continue
 user = User.find_by_email(params[:session][:email])
UsermailerMailer.with(user: @user)
UsermailerMailer.with(user: @user).welcome_email.deliver_later
user = User.find_by_email(params[:session][:email])
User.find_by_email(params[:session][:email])
params[:session][:email]
params
 user = User.find_by_email(params[:session][:email])
continue
@user.save
 @user = User.new(user_params)
continue
@user.save
@user = User.new(user_params)
continue
@user = User.new(user_params)
 NameError Exception: uninitialized constant ActiveStorage::Blob::Analyzable
 @user = User.new(user_params)
continue
@user = User.new(user_params)
continue
@user = User.new(user_params)
continue
 current_user.present?
continue
 current_user.present?
continue
User.find_by("name")
User.find_by(name)
User.find(name).id
User.find(name).name
User.find(id).name
@users
@user
current_user.id
current_user.present?
current_user.name
continue
current_user.present?
continue
 current_user.present?
continue
user.password_digest
user.password
params[:session][:password_digest]
user.password == (params[:session][:password_digest])
user
continue
params[:session][:email]
params[:session]
params
user = User.find_by_email(params[:email])
continue
 @user = User.find(params[:id])
 ActiveStorage.present?
f ActiveStorage.present?
continue
@user.ActiveStorage.present?
continue
 @user.avatar.present
 @user.active_storage_blobs.present
 @user.avatar.present
continue
@user.avatar.present?
@user.active_storage_attachments.present?
 @user
continue
redirect_to "/"
 @user.destroy
  @user = User.find(params[:id])
continue
@user.destroy
 @user = User.find(params[:id])
continue
 redirect_to users_path
 @user.destroy
  @user = User.find(params[:id])
continue
 @user.articles.present?
continue
 user_article.title
 @user.articles.count
 @user.articles
user_article
@user.articles
@user
continue
@user.articles
@user.articles.count
@user.artcles.count
@user
continue
all_article
current_user
   Article.where(id: session[:user_id]).first
Article.where(id: session[:user_id])
continue
 all_article.user_id
all_article
 current_user.id
continue
  Article.where(id: session[:user_id]).first
continue
all_article
all_article.user_id 
 all_article
 current_user.id
continue
  Article.where(id: session[:user_id]).first
  Article.where(id: session[:user_id])
  Article.where(id: session[:user_id]).first
continue
  Article.where(id: session[:user_id].first
  Article.where(id: session[:user_id]
continue
all_article.user_id
all_article
current_user.id 
continue
 current_user.id
continue
params
continue
Article.find(user_id: params[:user_id])
Article.find(user_id: params[:user_id)
Article.find(user_id: params[:user_id])
Article.find(user_id: praram[:user_id])
Article.find(user_id)
current_user.id
continue
a = Article.where(user_id: 1)
a = Article.first
@user
current_user.id == 
current.user_id
a
@user.id
@user
Article.all.user_id
Article.all
 article
 articles
 @article
 current_user.id 
continue
(user.articles.ids).count
user.articles.present?
continue
(user.articles.ids).count
user.articles.ids
user.articles.id
 user.articles
 user.articles.present?
 user
continue
current_user.id == (@user.id).to_i
continue
 current_user.id == (@user.id).to_i 
continue
 (@user.id).to_i
@user
current_user.id 
continue
@user
(@user.user_id).to_i
current_user.id
continue
  current_user.id ==  (@article.user_id).to_i
(@article.user_id).to_i
@article.user_id
 current_user.id
 current_user.id == @article.user_id
 @article.user_id
 @article
= @article
 current_user.id
continue
@article.user_id
current_user.id
continue
current_user.id == @article.id
if current_user.id == @article.id
continue
 session[:user_id] = user.id
 user.password == (params[:password])
 user = User.find_by_email(params[:email])
continue
 @user = User.new(user_params)
continue
 @user = User.new(user_params)
continue
 @user = User.new(user_params)
continue
user.password
user.password == (params[:password])
user = User.find_by_email(params[:email])
params
continue
 @user = User.new(user_params)
 @user
params
continue
 @user = User.new(user_params)
continue
 @user = User.new(user_params)
continue
 @user = User.new(user_params)
continue
 @user = User.new(user_params)
continue
